<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-05-19T22:49:50-03:00</updated><id>/feed.xml</id><title type="html">Victor Os√≥rio‚Äôs Tech Stuffs</title><subtitle>Ok. I have github. Github has Github Pages. It is free... So let me use it! üòé</subtitle><author><name>https://www.linkedin.com/in/victorosorio/</name></author><entry><title type="html">Algorithms - An introduction</title><link href="/posts/algorithms-an-introduction/" rel="alternate" type="text/html" title="Algorithms - An introduction" /><published>2020-01-10T00:00:00-03:00</published><updated>2020-01-10T00:00:00-03:00</updated><id>/posts/algorithms-an-introduction</id><content type="html" xml:base="/posts/algorithms-an-introduction/">&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;The NOTION of an algorithm is basic to all computer programming.&lt;/em&gt; 
Donald E. Knuth&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even you do not care about algorithms, if you program in any programming language you use, produce and read algorithms.&lt;/p&gt;

&lt;p&gt;A Programming Language is the language you can express algorithms to the computer can undestand it. So, here I want to make a difference between Programming Languages and Presentation Languages. HTML for me is not a programming language‚Ä¶ No worries if you believe it is. ü§ì&lt;/p&gt;

&lt;div class=&quot;dev-article&quot;&gt;
    &lt;div class=&quot;dev-user-picture&quot;&gt;
        &lt;img src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--ZfC5ssaf--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/16729/1e201e0f-818b-40f5-92c2-28d4a90662e0.png&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;dev-article-title&quot;&gt;
        &lt;a href=&quot;https://dev.to/mortoray/of-course-html-is-a-programming-language-4ll5&quot;&gt;
            Of course HTML is a programming language
        &lt;/a&gt;
        &lt;div class=&quot;dev-tags&quot;&gt;&lt;div class=&quot;dev-tag&quot;&gt;&lt;a href=&quot;https://dev.to/t/programming&quot;&gt;programming&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;dev-tag&quot;&gt;&lt;a href=&quot;https://dev.to/t/webdev&quot;&gt;webdev&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;dev-tag&quot;&gt;&lt;a href=&quot;https://dev.to/t/career&quot;&gt;career&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;dev-tag&quot;&gt;&lt;a href=&quot;https://dev.to/t/language&quot;&gt;language&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;dev-logo&quot;&gt;
        &lt;img src=&quot;/assets/images/plugins/dev-logo.webp&quot; /&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;defining-algorithms&quot;&gt;Defining Algorithms&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.oxfordlearnersdictionaries.com/definition/english/algorithm&quot;&gt;Oxford Dictionary&lt;/a&gt; define algorithm as:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A set of rules that must be followed when solving a particular problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Any computer program is developed to solve a problem. &lt;em&gt;Or to create a problem‚Ä¶ no worries&lt;/em&gt; üòâ&lt;/p&gt;

&lt;p&gt;So a program &lt;strong&gt;SHOULD&lt;/strong&gt; follow a Recipe, and that is the algorithm. This is ubiquitous in any computing.&lt;/p&gt;

&lt;h2 id=&quot;characteristics&quot;&gt;Characteristics&lt;/h2&gt;

&lt;p&gt;An algorithm is a recipe, but a recipe is not an algorithm. Why? You can undestand a recipe, but a computer cannot! You are much smarter than a computer.&lt;/p&gt;

&lt;p&gt;To be an algorithm, a set of rules must have the following features&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Finiteness&lt;/li&gt;
  &lt;li&gt;Definiteness&lt;/li&gt;
  &lt;li&gt;Input&lt;/li&gt;
  &lt;li&gt;Output&lt;/li&gt;
  &lt;li&gt;Effectiveness&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1-finiteness&quot;&gt;1. Finiteness&lt;/h3&gt;

&lt;p&gt;An algorithm &lt;strong&gt;SHOULD&lt;/strong&gt; always terminate after a finite number of steps.&lt;/p&gt;

&lt;p&gt;There are some algorithms that search infinitely for a optimal value. Even this kind of algorithms should have a end, probably an finite number of iteractions or an &lt;em&gt;‚Äústable‚Äù&lt;/em&gt; value.&lt;/p&gt;

&lt;h3 id=&quot;2-definiteness&quot;&gt;2. Definiteness&lt;/h3&gt;

&lt;p&gt;Each step of an algorithm &lt;strong&gt;SHOULD&lt;/strong&gt; be precisely defined.&lt;/p&gt;

&lt;p&gt;You can make assumptions about something you read, but a computer cannot make any assumption. Each step should be precise.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/4du0v0ungpy4zaqbe7hr.png&quot; alt=&quot;Alt Text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Imagine an algorithm that says:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Divide m by n and assign x with the value&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This step is defined? No! You can make questions to this step: &lt;em&gt;Is x an Integer value?&lt;/em&gt; If we have &lt;code class=&quot;highlighter-rouge&quot;&gt;m=4&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;n=3&lt;/code&gt;, the result in &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; can be &lt;code class=&quot;highlighter-rouge&quot;&gt;x=1&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;x=1.333&lt;/code&gt;. Depending from the algorithm it can be any value.&lt;/p&gt;

&lt;p&gt;The correct step shuold be:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Assign the x (interger) with the value of m divided by n&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In an algorithm there is no space for questions in steps.&lt;/p&gt;

&lt;h3 id=&quot;3-input&quot;&gt;3. Input&lt;/h3&gt;

&lt;p&gt;An algorithm has zero or more &lt;em&gt;inputs&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;4-output&quot;&gt;4. Output&lt;/h3&gt;

&lt;p&gt;An algorithm has one or more &lt;em&gt;outputs&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;5-effectiveness&quot;&gt;5. Effectiveness&lt;/h3&gt;

&lt;p&gt;All steps need to be effective, that means it should be simple enough to be done without any other knowledge&lt;/p&gt;

&lt;h1 id=&quot;notation&quot;&gt;Notation&lt;/h1&gt;

&lt;p&gt;For writing an algorithm we need:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Numbered steps: We should be able to reffer to steps&lt;/li&gt;
  &lt;li&gt;Pseudocode: We should be able to translate the algorithm in any programming language&lt;/li&gt;
  &lt;li&gt;Given inputs&lt;/li&gt;
  &lt;li&gt;Given outputs&lt;/li&gt;
  &lt;li&gt;Assignments: This represents when a variable assume a new value. Normaly we use the notation &lt;code class=&quot;highlighter-rouge&quot;&gt;x ‚Üê y&lt;/code&gt;where means that &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; will be attributed the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;sorting-a-array&quot;&gt;Sorting a array&lt;/h1&gt;

&lt;p&gt;How can I sort an array of integers?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GIVEN:
    v    ‚Üí The given array
    n    ‚Üí The length of the given array
    x[i] ‚Üí The value stored in the position i from the array x

START:
  S1: FOR EACH i IN [0, n - 2]:
  S2:   min_index ‚Üê i
  S3:   FOR EACH j IN [i + 1, n - 1]:
  S4:     IF v[j] &amp;lt; v[min_index]?
  S5:       min_index ‚Üê j
  S6:   IF v[i] != v[min_index]?
  S7:     aux ‚Üê v[min_index]
  S8:     v[min_index] ‚Üê v[i]
  S9:     v[i] ‚Üê aux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;About this algorithm we can ask:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Is it finite?&lt;/strong&gt; Yes, it will iterate over the array.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Is it definite?&lt;/strong&gt; Yes, every step can be done without any assumption.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;What is the input?&lt;/strong&gt; The array and it‚Äôs length.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;What is the output?&lt;/strong&gt; The same array, every change is made inplace&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Is it effective?&lt;/strong&gt; Yes, it will sort any array.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;running-with-the-pen&quot;&gt;Running with the pen&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GIVEN: 
  v = [5, 100, -6, 98, -111, 0]
  n = 6

  S1: i ‚Üê 0                                v = [5, 100, -6, 98, -111, 0]   min_index = 0   aux = 0
  S2: min_index ‚Üê 0                        v = [5, 100, -6, 98, -111, 0]   min_index = 0   aux = 0
  S3: j ‚Üê 1                                v = [5, 100, -6, 98, -111, 0]   min_index = 0   aux = 0
  S4: v[1] &amp;lt; v[0] ? (100 &amp;lt; 5)    NO        v = [5, 100, -6, 98, -111, 0]   min_index = 0   aux = 0
  S3: j ‚Üê 2                                v = [5, 100, -6, 98, -111, 0]   min_index = 0   aux = 0
  S4: v[2] &amp;lt; v[0] ? (-6 &amp;lt; 5)     YES       v = [5, 100, -6, 98, -111, 0]   min_index = 0   aux = 0
  S5: min_index ‚Üê 2                        v = [5, 100, -6, 98, -111, 0]   min_index = 2   aux = 0
  S3: j ‚Üê 3                                v = [5, 100, -6, 98, -111, 0]   min_index = 2   aux = 0
  S4: v[3] &amp;lt; v[2] ? (98 &amp;lt; -6)    NO        v = [5, 100, -6, 98, -111, 0]   min_index = 2   aux = 0
  S3: j ‚Üê 4                                v = [5, 100, -6, 98, -111, 0]   min_index = 2   aux = 0
  S4: v[4] &amp;lt; v[2] ? (-111 &amp;lt; -6)  YES       v = [5, 100, -6, 98, -111, 0]   min_index = 2   aux = 0
  S5: min_index ‚Üê 4                        v = [5, 100, -6, 98, -111, 0]   min_index = 4   aux = 0
  S3: j ‚Üê 5                                v = [5, 100, -6, 98, -111, 0]   min_index = 4   aux = 0
  S4: v[5] &amp;lt; v[4] ? (0 &amp;lt; -111)   NO        v = [5, 100, -6, 98, -111, 0]   min_index = 4   aux = 0
  S6: v[0] != v[4] ? (5 != -111) YES       v = [5, 100, -6, 98, -111, 0]   min_index = 4   aux = -111
  S7: aux ‚Üê -111                           v = [5, 100, -6, 98, -111, 0]   min_index = 4   aux = -111
  S8: v[4] ‚Üê 5                             v = [5, 100, -6, 98, 5, 0]      min_index = 4   aux = -111
  S9: v[0] = -111                          v = [-111, 100, -6, 98, 5, 0]   min_index = 4   aux = -111
  S1: i ‚Üê 1                                v = [-111, 100, -6, 98, 5, 0]   min_index = 4   aux = -111
  S2: min_index ‚Üê 1                        v = [-111, 100, -6, 98, 5, 0]   min_index = 1   aux = -111
  S3: j ‚Üê 2                                v = [-111, 100, -6, 98, 5, 0]   min_index = 1   aux = -111
  S4: v[2] &amp;lt; v[1] ? (-6 &amp;lt; 100)   YES       v = [-111, 100, -6, 98, 5, 0]   min_index = 1   aux = -111
  S5: min_index ‚Üê 2                        v = [-111, 100, -6, 98, 5, 0]   min_index = 2   aux = -111
  S3: j ‚Üê 3                                v = [-111, 100, -6, 98, 5, 0]   min_index = 2   aux = -111
  S4: v[3] &amp;lt; v[2] ? (98 &amp;lt; -6)    NO        v = [-111, 100, -6, 98, 5, 0]   min_index = 2   aux = -111
  S3: j ‚Üê 4                                v = [-111, 100, -6, 98, 5, 0]   min_index = 2   aux = -111
  S4: v[4] &amp;lt; v[2] ? (5 &amp;lt; -6)     NO        v = [-111, 100, -6, 98, 5, 0]   min_index = 2   aux = -111
  S3: j ‚Üê 5                                v = [-111, 100, -6, 98, 5, 0]   min_index = 2   aux = -111
  S4: v[5] &amp;lt; v[2] ? (0 &amp;lt; -6)     NO        v = [-111, 100, -6, 98, 5, 0]   min_index = 2   aux = -111
  S6: v[1] != v[2] ? (100 != -6) YES       v = [-111, 100, -6, 98, 5, 0]   min_index = 2   aux = -111
  S7: aux ‚Üê -6                             v = [-111, 100, -6, 98, 5, 0]   min_index = 2   aux = -6
  S8: v[2] ‚Üê 100                           v = [-111, 100, 100, 98, 5, 0]  min_index = 2   aux = -6
  S9: v[1] = -6                            v = [-111, -6, 100, 98, 5, 0]   min_index = 2   aux = -6
  S1: i ‚Üê 2                                v = [-111, -6, 100, 98, 5, 0]   min_index = 2   aux = -6
  S2: min_index ‚Üê 2                        v = [-111, -6, 100, 98, 5, 0]   min_index = 2   aux = -6
  S3: j ‚Üê 3                                v = [-111, -6, 100, 98, 5, 0]   min_index = 2   aux = -6
  S4: v[3] &amp;lt; v[2] ? (98 &amp;lt; 100)   NO        v = [-111, -6, 100, 98, 5, 0]   min_index = 2   aux = -6
  S3: j ‚Üê 4                                v = [-111, -6, 100, 98, 5, 0]   min_index = 2   aux = -6
  S4: v[4] &amp;lt; v[2] ? (5 &amp;lt; 100)    YES       v = [-111, -6, 100, 98, 5, 0]   min_index = 2   aux = -6
  S5: min_index ‚Üê 4                        v = [-111, -6, 100, 98, 5, 0]   min_index = 4   aux = -6
  S3: j ‚Üê 5                                v = [-111, -6, 100, 98, 5, 0]   min_index = 4   aux = -6
  S4: v[5] &amp;lt; v[4] ? (0 &amp;lt; 5)      YES       v = [-111, -6, 100, 98, 5, 0]   min_index = 4   aux = -6
  S5: min_index ‚Üê 5                        v = [-111, -6, 100, 98, 5, 0]   min_index = 5   aux = -6
  S6: v[2] != v[5] ? (100 != 0)  YES       v = [-111, -6, 100, 98, 5, 0]   min_index = 5   aux = -6
  S7: aux ‚Üê 0                              v = [-111, -6, 100, 98, 5, 0]   min_index = 5   aux = 0
  S8: v[5] ‚Üê 100                           v = [-111, -6, 100, 98, 5, 100] min_index = 5   aux = 0
  S9: v[2] = 0                             v = [-111, -6, 0, 98, 5, 100]   min_index = 5   aux = 0
  S1: i ‚Üê 3                                v = [-111, -6, 0, 98, 5, 100]   min_index = 2   aux = 0
  S2: min_index ‚Üê 3                        v = [-111, -6, 0, 98, 5, 100]   min_index = 3   aux = 0
  S3: j ‚Üê 4                                v = [-111, -6, 0, 98, 5, 100]   min_index = 3   aux = 0
  S4: v[4] &amp;lt; v[3] ? (5 &amp;lt; 98)     YES       v = [-111, -6, 0, 98, 5, 100]   min_index = 3   aux = 0
  S5: min_index ‚Üê 4                        v = [-111, -6, 0, 98, 5, 100]   min_index = 4   aux = 0
  S3: j ‚Üê 5                                v = [-111, -6, 0, 98, 5, 100]   min_index = 4   aux = 0
  S4: v[5] &amp;lt; v[4] ? (100 &amp;lt; 5)    NO        v = [-111, -6, 0, 98, 5, 100]   min_index = 4   aux = 0
  S6: v[3] != v[4] ? (98 != 5)   YES       v = [-111, -6, 0, 98, 5, 100]   min_index = 4   aux = 0
  S7: aux ‚Üê 5                              v = [-111, -6, 0, 98, 5, 100]   min_index = 5   aux = 5
  S8: v[4] ‚Üê 98                            v = [-111, -6, 0, 98, 98, 100]  min_index = 5   aux = 5
  S9: v[3] = 5                             v = [-111, -6, 0, 5, 98, 100]   min_index = 5   aux = 5
  S1: i ‚Üê 4                                v = [-111, -6, 0, 5, 98, 100]   min_index = 5   aux = 5
  S2: min_index ‚Üê 4                        v = [-111, -6, 0, 5, 98, 100]   min_index = 5   aux = 5
  S3: j ‚Üê 5                                v = [-111, -6, 0, 5, 98, 100]   min_index = 5   aux = 5
  S4: v[5] &amp;lt; v[4] ? (100 &amp;lt; 98)   NO        v = [-111, -6, 0, 5, 98, 100]   min_index = 5   aux = 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we can see, given the input &lt;code class=&quot;highlighter-rouge&quot;&gt;[5, 100, -6, 98, -111, 0]&lt;/code&gt;, it returns the output &lt;code class=&quot;highlighter-rouge&quot;&gt;[-111, -6, 0, 5, 98, 100]&lt;/code&gt;. So in the output there is no value &lt;code class=&quot;highlighter-rouge&quot;&gt;v[i]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;v[j]&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;i &amp;lt; j&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;v[i] &amp;gt; v[j]&lt;/code&gt;, that means the array is sorted.&lt;/p&gt;</content><author><name>https://www.linkedin.com/in/victorosorio/</name></author><category term="Algorithms" /><category term="Computer Science" /><summary type="html">The NOTION of an algorithm is basic to all computer programming. Donald E. Knuth Even you do not care about algorithms, if you program in any programming language you use, produce and read algorithms. A Programming Language is the language you can express algorithms to the computer can undestand it. So, here I want to make a difference between Programming Languages and Presentation Languages. HTML for me is not a programming language‚Ä¶ No worries if you believe it is. ü§ì Of course HTML is a programming language programmingwebdevcareerlanguage Defining Algorithms The Oxford Dictionary define algorithm as: A set of rules that must be followed when solving a particular problem. Any computer program is developed to solve a problem. Or to create a problem‚Ä¶ no worries üòâ So a program SHOULD follow a Recipe, and that is the algorithm. This is ubiquitous in any computing. Characteristics An algorithm is a recipe, but a recipe is not an algorithm. Why? You can undestand a recipe, but a computer cannot! You are much smarter than a computer. To be an algorithm, a set of rules must have the following features Finiteness Definiteness Input Output Effectiveness 1. Finiteness An algorithm SHOULD always terminate after a finite number of steps. There are some algorithms that search infinitely for a optimal value. Even this kind of algorithms should have a end, probably an finite number of iteractions or an ‚Äústable‚Äù value. 2. Definiteness Each step of an algorithm SHOULD be precisely defined. You can make assumptions about something you read, but a computer cannot make any assumption. Each step should be precise. Imagine an algorithm that says: Divide m by n and assign x with the value This step is defined? No! You can make questions to this step: Is x an Integer value? If we have m=4 and n=3, the result in x can be x=1 or x=1.333. Depending from the algorithm it can be any value. The correct step shuold be: Assign the x (interger) with the value of m divided by n In an algorithm there is no space for questions in steps. 3. Input An algorithm has zero or more inputs. 4. Output An algorithm has one or more outputs. 5. Effectiveness All steps need to be effective, that means it should be simple enough to be done without any other knowledge Notation For writing an algorithm we need: Numbered steps: We should be able to reffer to steps Pseudocode: We should be able to translate the algorithm in any programming language Given inputs Given outputs Assignments: This represents when a variable assume a new value. Normaly we use the notation x ‚Üê ywhere means that x will be attributed the value of y. Sorting a array How can I sort an array of integers? GIVEN: v ‚Üí The given array n ‚Üí The length of the given array x[i] ‚Üí The value stored in the position i from the array x START: S1: FOR EACH i IN [0, n - 2]: S2: min_index ‚Üê i S3: FOR EACH j IN [i + 1, n - 1]: S4: IF v[j] &amp;lt; v[min_index]? S5: min_index ‚Üê j S6: IF v[i] != v[min_index]? S7: aux ‚Üê v[min_index] S8: v[min_index] ‚Üê v[i] S9: v[i] ‚Üê aux About this algorithm we can ask: Is it finite? Yes, it will iterate over the array. Is it definite? Yes, every step can be done without any assumption. What is the input? The array and it‚Äôs length. What is the output? The same array, every change is made inplace Is it effective? Yes, it will sort any array. Running with the pen GIVEN: v = [5, 100, -6, 98, -111, 0] n = 6 S1: i ‚Üê 0 v = [5, 100, -6, 98, -111, 0] min_index = 0 aux = 0 S2: min_index ‚Üê 0 v = [5, 100, -6, 98, -111, 0] min_index = 0 aux = 0 S3: j ‚Üê 1 v = [5, 100, -6, 98, -111, 0] min_index = 0 aux = 0 S4: v[1] &amp;lt; v[0] ? (100 &amp;lt; 5) NO v = [5, 100, -6, 98, -111, 0] min_index = 0 aux = 0 S3: j ‚Üê 2 v = [5, 100, -6, 98, -111, 0] min_index = 0 aux = 0 S4: v[2] &amp;lt; v[0] ? (-6 &amp;lt; 5) YES v = [5, 100, -6, 98, -111, 0] min_index = 0 aux = 0 S5: min_index ‚Üê 2 v = [5, 100, -6, 98, -111, 0] min_index = 2 aux = 0 S3: j ‚Üê 3 v = [5, 100, -6, 98, -111, 0] min_index = 2 aux = 0 S4: v[3] &amp;lt; v[2] ? (98 &amp;lt; -6) NO v = [5, 100, -6, 98, -111, 0] min_index = 2 aux = 0 S3: j ‚Üê 4 v = [5, 100, -6, 98, -111, 0] min_index = 2 aux = 0 S4: v[4] &amp;lt; v[2] ? (-111 &amp;lt; -6) YES v = [5, 100, -6, 98, -111, 0] min_index = 2 aux = 0 S5: min_index ‚Üê 4 v = [5, 100, -6, 98, -111, 0] min_index = 4 aux = 0 S3: j ‚Üê 5 v = [5, 100, -6, 98, -111, 0] min_index = 4 aux = 0 S4: v[5] &amp;lt; v[4] ? (0 &amp;lt; -111) NO v = [5, 100, -6, 98, -111, 0] min_index = 4 aux = 0 S6: v[0] != v[4] ? (5 != -111) YES v = [5, 100, -6, 98, -111, 0] min_index = 4 aux = -111 S7: aux ‚Üê -111 v = [5, 100, -6, 98, -111, 0] min_index = 4 aux = -111 S8: v[4] ‚Üê 5 v = [5, 100, -6, 98, 5, 0] min_index = 4 aux = -111 S9: v[0] = -111 v = [-111, 100, -6, 98, 5, 0] min_index = 4 aux = -111 S1: i ‚Üê 1 v = [-111, 100, -6, 98, 5, 0] min_index = 4 aux = -111 S2: min_index ‚Üê 1 v = [-111, 100, -6, 98, 5, 0] min_index = 1 aux = -111 S3: j ‚Üê 2 v = [-111, 100, -6, 98, 5, 0] min_index = 1 aux = -111 S4: v[2] &amp;lt; v[1] ? (-6 &amp;lt; 100) YES v = [-111, 100, -6, 98, 5, 0] min_index = 1 aux = -111 S5: min_index ‚Üê 2 v = [-111, 100, -6, 98, 5, 0] min_index = 2 aux = -111 S3: j ‚Üê 3 v = [-111, 100, -6, 98, 5, 0] min_index = 2 aux = -111 S4: v[3] &amp;lt; v[2] ? (98 &amp;lt; -6) NO v = [-111, 100, -6, 98, 5, 0] min_index = 2 aux = -111 S3: j ‚Üê 4 v = [-111, 100, -6, 98, 5, 0] min_index = 2 aux = -111 S4: v[4] &amp;lt; v[2] ? (5 &amp;lt; -6) NO v = [-111, 100, -6, 98, 5, 0] min_index = 2 aux = -111 S3: j ‚Üê 5 v = [-111, 100, -6, 98, 5, 0] min_index = 2 aux = -111 S4: v[5] &amp;lt; v[2] ? (0 &amp;lt; -6) NO v = [-111, 100, -6, 98, 5, 0] min_index = 2 aux = -111 S6: v[1] != v[2] ? (100 != -6) YES v = [-111, 100, -6, 98, 5, 0] min_index = 2 aux = -111 S7: aux ‚Üê -6 v = [-111, 100, -6, 98, 5, 0] min_index = 2 aux = -6 S8: v[2] ‚Üê 100 v = [-111, 100, 100, 98, 5, 0] min_index = 2 aux = -6 S9: v[1] = -6 v = [-111, -6, 100, 98, 5, 0] min_index = 2 aux = -6 S1: i ‚Üê 2 v = [-111, -6, 100, 98, 5, 0] min_index = 2 aux = -6 S2: min_index ‚Üê 2 v = [-111, -6, 100, 98, 5, 0] min_index = 2 aux = -6 S3: j ‚Üê 3 v = [-111, -6, 100, 98, 5, 0] min_index = 2 aux = -6 S4: v[3] &amp;lt; v[2] ? (98 &amp;lt; 100) NO v = [-111, -6, 100, 98, 5, 0] min_index = 2 aux = -6 S3: j ‚Üê 4 v = [-111, -6, 100, 98, 5, 0] min_index = 2 aux = -6 S4: v[4] &amp;lt; v[2] ? (5 &amp;lt; 100) YES v = [-111, -6, 100, 98, 5, 0] min_index = 2 aux = -6 S5: min_index ‚Üê 4 v = [-111, -6, 100, 98, 5, 0] min_index = 4 aux = -6 S3: j ‚Üê 5 v = [-111, -6, 100, 98, 5, 0] min_index = 4 aux = -6 S4: v[5] &amp;lt; v[4] ? (0 &amp;lt; 5) YES v = [-111, -6, 100, 98, 5, 0] min_index = 4 aux = -6 S5: min_index ‚Üê 5 v = [-111, -6, 100, 98, 5, 0] min_index = 5 aux = -6 S6: v[2] != v[5] ? (100 != 0) YES v = [-111, -6, 100, 98, 5, 0] min_index = 5 aux = -6 S7: aux ‚Üê 0 v = [-111, -6, 100, 98, 5, 0] min_index = 5 aux = 0 S8: v[5] ‚Üê 100 v = [-111, -6, 100, 98, 5, 100] min_index = 5 aux = 0 S9: v[2] = 0 v = [-111, -6, 0, 98, 5, 100] min_index = 5 aux = 0 S1: i ‚Üê 3 v = [-111, -6, 0, 98, 5, 100] min_index = 2 aux = 0 S2: min_index ‚Üê 3 v = [-111, -6, 0, 98, 5, 100] min_index = 3 aux = 0 S3: j ‚Üê 4 v = [-111, -6, 0, 98, 5, 100] min_index = 3 aux = 0 S4: v[4] &amp;lt; v[3] ? (5 &amp;lt; 98) YES v = [-111, -6, 0, 98, 5, 100] min_index = 3 aux = 0 S5: min_index ‚Üê 4 v = [-111, -6, 0, 98, 5, 100] min_index = 4 aux = 0 S3: j ‚Üê 5 v = [-111, -6, 0, 98, 5, 100] min_index = 4 aux = 0 S4: v[5] &amp;lt; v[4] ? (100 &amp;lt; 5) NO v = [-111, -6, 0, 98, 5, 100] min_index = 4 aux = 0 S6: v[3] != v[4] ? (98 != 5) YES v = [-111, -6, 0, 98, 5, 100] min_index = 4 aux = 0 S7: aux ‚Üê 5 v = [-111, -6, 0, 98, 5, 100] min_index = 5 aux = 5 S8: v[4] ‚Üê 98 v = [-111, -6, 0, 98, 98, 100] min_index = 5 aux = 5 S9: v[3] = 5 v = [-111, -6, 0, 5, 98, 100] min_index = 5 aux = 5 S1: i ‚Üê 4 v = [-111, -6, 0, 5, 98, 100] min_index = 5 aux = 5 S2: min_index ‚Üê 4 v = [-111, -6, 0, 5, 98, 100] min_index = 5 aux = 5 S3: j ‚Üê 5 v = [-111, -6, 0, 5, 98, 100] min_index = 5 aux = 5 S4: v[5] &amp;lt; v[4] ? (100 &amp;lt; 98) NO v = [-111, -6, 0, 5, 98, 100] min_index = 5 aux = 5 As we can see, given the input [5, 100, -6, 98, -111, 0], it returns the output [-111, -6, 0, 5, 98, 100]. So in the output there is no value v[i] and v[j] where i &amp;lt; j and v[i] &amp;gt; v[j], that means the array is sorted.</summary></entry><entry><title type="html">Escolhendo uma implementa√ß√£o Jakarta EE &amp;amp; Microprofile.io</title><link href="/posts/escolhendo-uma-implementacao-jakarta-ee-microprofile-io/" rel="alternate" type="text/html" title="Escolhendo uma implementa√ß√£o Jakarta EE &amp; Microprofile.io" /><published>2019-09-30T00:00:00-03:00</published><updated>2019-09-30T00:00:00-03:00</updated><id>/posts/escolhendo-uma-implementacao-jakarta-ee-microprofile-io</id><content type="html" xml:base="/posts/escolhendo-uma-implementacao-jakarta-ee-microprofile-io/">&lt;p&gt;O primeiro passo ao se desenvolver uma aplica√ß√£o Jakarta EE ou Microprofile.io √© escolher qual ser√° a implementa√ß√£o que voc√™ ir√° utilizar. Ou o mais conhecido Servidor de Aplica√ß√£o.&lt;/p&gt;

&lt;p&gt;As implementa√ß√µes de Microprofile.io s√£o mais leves que as implementa√ß√µes de Jakarta EE. Isso acontece porque o n√∫mero de especifica√ß√µes implementadas por um servidor Jakarta EE √© muito maior do que o de Microprofile.io. Logo, se voc√™ deseja implementar um simples microservi√ßos, escolher um &lt;a href=&quot;https://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; seria como escolher um canh√£o pra matar uma mosca.&lt;/p&gt;

&lt;h1 id=&quot;starters&quot;&gt;Starters&lt;/h1&gt;

&lt;p&gt;Um bom ponto para iniciar √© por um Starter. O Microprofile.io tem seu pr√≥prio &lt;a href=&quot;https://start.microprofile.io/&quot;&gt;Starter&lt;/a&gt;, com ele √© poss√≠vel escolher qual vers√£o da especifica√ß√£o e qual plataforma dever√° ser usada.&lt;/p&gt;

&lt;p&gt;N√£o encotrei um Starter para Jakarta EE oficial, mas h√° muitos tutoriais na internet. Nessa s√©rie nosso foco ser√° em projetos Microprofile.io, logo este starter √© suficiente.&lt;/p&gt;

&lt;p&gt;Caso queira um Starter Jakarta EE, h√° alguns:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://generjee.inetseite.de/&quot;&gt;generjee&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;servidores-de-aplica√ß√£o&quot;&gt;Servidores de Aplica√ß√£o&lt;/h1&gt;

&lt;p&gt;Segue abaixo uma lista n√£o exaustiva dos servidores de aplica√ß√£o existente. Nesse tutorial usaremos o Thorntail.io para nossas implementa√ß√µes.&lt;/p&gt;

&lt;p&gt;Todos os servidores 100% compat√≠veis podem ser encontrados nas paginas de cada projeto:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jakarta.ee/compatibility/&quot;&gt;Jakarta EE&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.eclipse.org/MicroProfile/Implementation&quot;&gt;Microprofile.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;glassfish&quot;&gt;GlassFish&lt;/h2&gt;

&lt;p&gt;O &lt;a href=&quot;https://javaee.github.io/glassfish/download&quot;&gt;GlassFish&lt;/a&gt; √© a implementa√ß√£o oficial do Jakarta EE. O mesmo ser√° 100% compat√≠vel com as especifica√ß√µes.&lt;/p&gt;

&lt;h2 id=&quot;payara&quot;&gt;Payara&lt;/h2&gt;

&lt;p&gt;Compat√≠vel com Jakarta EE e Microprofile.io. &lt;a href=&quot;https://www.payara.fish/documentation/getting-started-with-payara/&quot;&gt;Getting started with Payara‚Ä¶&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;wildfly&quot;&gt;WildFly&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://wildfly.org/&quot;&gt;Um dos mais conhecidos no mercado&lt;/a&gt;. Anteriormente conhecido como JBoss. Compat√≠vel com Jakarta EE.&lt;/p&gt;

&lt;h2 id=&quot;tomee&quot;&gt;TomEE&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://tomee.apache.org/&quot;&gt;Compat√≠vel&lt;/a&gt; com Jakarta EE e Microprofile.io.&lt;/p&gt;

&lt;h2 id=&quot;openliberty&quot;&gt;OpenLiberty&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://openliberty.io/&quot;&gt;Compat√≠vel&lt;/a&gt; com Jakarta EE e Microprofile.io.&lt;/p&gt;

&lt;h2 id=&quot;quakusio&quot;&gt;Quakus.io&lt;/h2&gt;

&lt;p&gt;O &lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus.io&lt;/a&gt; n√£o √© 100% compat√≠vel com nenhuma das duas especifica√ß√µes! Mas ele est√° caminhando nesse caminho. Sua ideia principal √© prover um servidor de aplica√ß√£o mais leve que os outros e de f√°cil desenvolvimento. Ainda √© poss√≠vel usar a &lt;a href=&quot;https://www.graalvm.org/&quot;&gt;GraalVM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/o9mpk38fl4yl4tp0t32t.png&quot; alt=&quot;Quarkus.io&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;thorntailio&quot;&gt;Thorntail.io&lt;/h2&gt;

&lt;p&gt;Fork do WildFly, o &lt;a href=&quot;https://thorntail.io/generator/&quot;&gt;Thorntail&lt;/a&gt; √© voltado para implementa√ß√£o. Para o deploy n√£o √© necess√°rio configurar um servidor de aplica√ß√£o. O mesmo, junto com suas depend√™ncias, √© configurado automaticamente pela build Maven. Assim √© gerado ou um Fat-Jar ou um War + Hollow Jar.&lt;/p&gt;

&lt;p&gt;No Fat-Jar temos todas as depend√™ncias prontas para serem executadas.&lt;/p&gt;

&lt;p&gt;No Hollow-Jar temos todas as depend√™ncias empacotadas separadamente.&lt;/p&gt;</content><author><name>https://www.linkedin.com/in/victorosorio/</name></author><category term="Jakarta-EE" /><category term="Java-EE" /><category term="Java" /><category term="Framework" /><summary type="html">O primeiro passo ao se desenvolver uma aplica√ß√£o Jakarta EE ou Microprofile.io √© escolher qual ser√° a implementa√ß√£o que voc√™ ir√° utilizar. Ou o mais conhecido Servidor de Aplica√ß√£o. As implementa√ß√µes de Microprofile.io s√£o mais leves que as implementa√ß√µes de Jakarta EE. Isso acontece porque o n√∫mero de especifica√ß√µes implementadas por um servidor Jakarta EE √© muito maior do que o de Microprofile.io. Logo, se voc√™ deseja implementar um simples microservi√ßos, escolher um WildFly seria como escolher um canh√£o pra matar uma mosca. Starters Um bom ponto para iniciar √© por um Starter. O Microprofile.io tem seu pr√≥prio Starter, com ele √© poss√≠vel escolher qual vers√£o da especifica√ß√£o e qual plataforma dever√° ser usada. N√£o encotrei um Starter para Jakarta EE oficial, mas h√° muitos tutoriais na internet. Nessa s√©rie nosso foco ser√° em projetos Microprofile.io, logo este starter √© suficiente. Caso queira um Starter Jakarta EE, h√° alguns: generjee Servidores de Aplica√ß√£o Segue abaixo uma lista n√£o exaustiva dos servidores de aplica√ß√£o existente. Nesse tutorial usaremos o Thorntail.io para nossas implementa√ß√µes. Todos os servidores 100% compat√≠veis podem ser encontrados nas paginas de cada projeto: Jakarta EE Microprofile.io GlassFish O GlassFish √© a implementa√ß√£o oficial do Jakarta EE. O mesmo ser√° 100% compat√≠vel com as especifica√ß√µes. Payara Compat√≠vel com Jakarta EE e Microprofile.io. Getting started with Payara‚Ä¶ WildFly Um dos mais conhecidos no mercado. Anteriormente conhecido como JBoss. Compat√≠vel com Jakarta EE. TomEE Compat√≠vel com Jakarta EE e Microprofile.io. OpenLiberty Compat√≠vel com Jakarta EE e Microprofile.io. Quakus.io O Quarkus.io n√£o √© 100% compat√≠vel com nenhuma das duas especifica√ß√µes! Mas ele est√° caminhando nesse caminho. Sua ideia principal √© prover um servidor de aplica√ß√£o mais leve que os outros e de f√°cil desenvolvimento. Ainda √© poss√≠vel usar a GraalVM. Thorntail.io Fork do WildFly, o Thorntail √© voltado para implementa√ß√£o. Para o deploy n√£o √© necess√°rio configurar um servidor de aplica√ß√£o. O mesmo, junto com suas depend√™ncias, √© configurado automaticamente pela build Maven. Assim √© gerado ou um Fat-Jar ou um War + Hollow Jar. No Fat-Jar temos todas as depend√™ncias prontas para serem executadas. No Hollow-Jar temos todas as depend√™ncias empacotadas separadamente.</summary></entry><entry><title type="html">Jakarta EE e Microprofile.io</title><link href="/posts/jakarta-ee-e-microprofile-io/" rel="alternate" type="text/html" title="Jakarta EE e Microprofile.io" /><published>2019-09-30T00:00:00-03:00</published><updated>2019-09-30T00:00:00-03:00</updated><id>/posts/jakarta-ee-e-microprofile-io</id><content type="html" xml:base="/posts/jakarta-ee-e-microprofile-io/">&lt;p&gt;Talvez voc√™ como desenvolvedor Java n√£o conhe√ßa esses dois nomes. Talvez quando voc√™ vai pensar em desenvolver Java
    j√° pensa em Spring. Caso voc√™ esteja nesses dois grupos, essa s√©rie √© para voc√™!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Para quem n√£o conhece, o mundo Java √© direcionados por especifica√ß√µes. Especifica√ß√µes s√£o coisas as vezes um pouco
    chatas, mas que nos d√£o uma seguran√ßa enorme de desenvolvimento. Para quem desenvolve Java faz mais de 15 anos,
    nunca vi uma &lt;i&gt;breaking feature&lt;/i&gt;, algo que tornou meu c√≥digo antigo n√£o compil√°vel! Isso se deve as especifica√ß√µes
    Java, cada feature nova deve ser compat√≠vel com especifica√ß√µes antigas e devem ser especificadas.&lt;/p&gt;
&lt;p&gt;Especifica√ß√µes n√£o existem somente para a linguagem Java, existem tamb√©m para a comunidade Java. &lt;/p&gt;

&lt;h2&gt;Java EE&lt;/h2&gt;

&lt;p&gt;At√© 2018 existia algo que chamavamos de Java EE. &lt;/p&gt;
&lt;p&gt;RIP! ‚ò†Ô∏è‚ò†Ô∏è‚ò†Ô∏è &lt;/p&gt;
&lt;p&gt;Long live to Jakarta EE! üëëüëëüëë&lt;/p&gt;
&lt;p&gt;Java EE n√£o era um framework. Era um conjunto de especifica√ß√µes que serviam de base para implementa√ß√£o de Frameworks.
    O intuido dessas especifica√ß√µes era tornar qualquer aplica√ß√£o Java EE livre de implementa√ß√µes. Assim qualquer
    projeto Java EE, poderia ser facilmente migr√°vel para qualquer uma das implementa√ß√µes compat√≠veis. Evitando assim o
    que podemos chamar de &lt;a href=&quot;https://en.wikipedia.org/wiki/Vendor_lock-in&quot;&gt;Vendor Lock-in&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Java EE tinha um s√©rio problema. O &lt;i&gt;timing&lt;/i&gt; das especifica√ß√µes era mais lento que o passo da comunidade. Isso se
    devia ao processo imposto pela Oracle ao desenvolvimento, que ao ser &lt;a href=&quot;https://www.oracle.com/java/technologies/java-ee-glance.html&quot;&gt;&lt;i&gt;Specification First&lt;/i&gt;&lt;/a&gt; j√° impunha um
    passo lento √†s inova√ß√µes.&lt;/p&gt;
&lt;p&gt;Mas....&lt;/p&gt;

&lt;h2&gt;Microprofile.io&lt;/h2&gt;

&lt;p&gt;Por volta de 2017, alguns nomes da comunidade perceberam que o Java EE n√£o estava acompanhando o desenvolvimento de
    aplica√ß√µes &lt;a href=&quot;https://12factor.net/pt_br/&quot;&gt;Cloud Native&lt;/a&gt;, suas especifica√ß√µes englobavam tudo que havia de
    novo em 2007, mas estavamos em 2017! Era preciso fazer algo! &lt;/p&gt;

&lt;div class=&quot;image-box&quot;&gt;
    &lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/eidzpplis9ehe42q46z6.png&quot; alt=&quot;Microprofile.io&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Para isso foi proposto um novo conjunto de especifica√ß√µes o &lt;a href=&quot;https://microprofile.io/&quot;&gt;Microprofile.io&lt;/a&gt;.
    Este seria focado em implementar os padr√µes de projetos para Cloud Native e &lt;a href=&quot;https://microservices.io/&quot;&gt;Microservi√ßos&lt;/a&gt;. Mas em termos de gerenciamento, estas especifica√ß√µes n√£o
    seriam &lt;i&gt;Specification First&lt;/i&gt;, mas &lt;i&gt;Coding First&lt;/i&gt;. Assim os padr√µes que j√° era implementados por um ou mais
    framework seriam homogeinizados e qui√ßa melhorados. O projeto n√£o seria coordenado pela Oracle, mas pela &lt;a href=&quot;https://twitter.com/EclipseFdn&quot;&gt;Eclipse Foundation&lt;/a&gt;. Com o padr√£o de governan√ßa da Eclise Fdn, haveria
    mais agilidade no desenvolvimento de novas especifica√ß√µes.&lt;/p&gt;

&lt;div class=&quot;image-box&quot;&gt;
    &lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/yzjn0p8qop27l9n5ff2s.png&quot; alt=&quot;Especifica√ß√µes&quot; /&gt;
&lt;/div&gt;

&lt;h2&gt;Jakarta EE&lt;/h2&gt;

&lt;div class=&quot;image-box&quot;&gt;
    &lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/3m3hhtorm5c8kdgc2nvs.jpg&quot; alt=&quot;Jakarta EE&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Com o crescimento do Microprofile.io, houve uma press√£o da comunidade para Oracle agilizar o processo de
    desenvolvimento de especifica√ß√µes. Isso levou a empresa a abrir m√£o e entregar o gerenciamento do projeto Java EE
    para Eclipse Foundation. Assim, o Java EE se tornou Jakarta EE. Java √© um nome registrado da Oracle. Todas as
    especifica√ß√µes &lt;b&gt;Java EE 8.0&lt;/b&gt; seria automaticamente transformadas em especifica√ß√µes &lt;b&gt;Jakarta EE 8.0&lt;/b&gt;.&lt;/p&gt;

&lt;div class=&quot;image-box&quot;&gt;
    &lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/r7qdl78m7mz01hyrc9vp.png&quot; alt=&quot;Especifica√ß√µes&quot; /&gt;
&lt;/div&gt;

&lt;h2&gt;Modelo de Programa√ß√£o&lt;/h2&gt;

&lt;p&gt;No fundo Jakarta EE √© um modelo de programa√ß√£o voltado a especifica√ß√µes. Uma aplica√ß√£o Jakarta EE n√£o depende de
    implementa√ß√£o, todas as depend√™ncias s√£o declaradas como providades e estas devem ser implementadas e providas pelo
    Container Jakarta EE. &lt;/p&gt;

&lt;h3&gt;Vantagens&lt;/h3&gt;
&lt;p&gt;Usando o modelo puramente Jakarta EE, nos d√° certas vantagens ao desenvolvimento:
&lt;ul&gt;
    &lt;li&gt;Velocidade de Desenvolvimento&lt;/li&gt;
    &lt;li&gt;Padroniza√ß√£o do c√≥digo&lt;/li&gt;
    &lt;li&gt;Baixo acoplamento e alta coes√£o&lt;/li&gt;
    &lt;li&gt;Foco na L√≥gica de Neg√≥cio&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;As especifica√ß√µes normalmente s√£o de funcionalidades comuns a v√°rias projetos. S√£o requisitos n√£o funcionais que
    liberam o desenvolvedor de se preocupar com coisas que j√° est√£o muito bem implementadas e testadas. &lt;/p&gt;

&lt;p&gt;Exemplo:
&lt;ul&gt;
    &lt;li&gt;&lt;i&gt;Porque o desenvolvedor precisaria implementar um servidor HTTP?&lt;/i&gt;&lt;/li&gt;
    &lt;li&gt;&lt;i&gt;Porque o desenvolvedor precisaria implementar um framework de DI?&lt;/i&gt;&lt;/li&gt;
    &lt;li&gt;&lt;i&gt;Porque o desenvolvedor precisaria implementar um framework de Valida√ß√£o?&lt;/i&gt;&lt;/li&gt;
    &lt;li&gt;&lt;i&gt;Porque o desenvolvedor precisaria implementar um framework de Persist√™ncia?&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;Na verdade n√£o h√° necessidade de re-implementar nenhum desses requisitos, os frameworks devem prover meios de
    integrar um c√≥digo a todas as funcionalidades propostar por ele. Jakarta EE padroniza esses meios. Assim qualquer
    aplica√ß√£o desenvolvida poder√° ser deployada em qualquer servidor de aplica√ß√£o compat√≠vel.&lt;/p&gt;

&lt;h3&gt;Container Jakarta EE&lt;/h3&gt;

&lt;p&gt;Quando falamos de Containers no mundo Jakarta EE, n√£o estamos se referindo ao Container Docker! N√£o! Esse conceito √©
    mais antigo. &lt;/p&gt;

&lt;p&gt;Container Jakarta EE seria qualquer &lt;a href=&quot;https://pt.wikipedia.org/wiki/Servidor_de_aplica%C3%A7%C3%A3o&quot;&gt;Servidor
        de Aplica√ß√£o&lt;/a&gt; respons√°vel pela administra√ß√£o e configura√ß√£o das aplica√ß√µes Jakarta EE.&lt;/p&gt;

&lt;h3&gt;Especifica√ß√µes&lt;/h3&gt;

&lt;p&gt;Esse post √© uma introdu√ß√£o a uma s√©rie que iniciarei detalhando as especifica√ß√µes Jakarta EE e Microprofile.io. Com
    isso gostaria de compartilhar como √© f√°cil desenvolver microservi√ßos Java robustos! Segue a lista de Especifica√ß√µes
    que planejo abranger:
&lt;ul&gt;
    &lt;li&gt;JSR 365 ‚Äì Contexts and Dependency Injection (CDI) 2.0&lt;/li&gt;
    &lt;li&gt;JSR 370 ‚Äì Java API for RESTful Web Services (JAX-RS) 2.1&lt;/li&gt;
    &lt;li&gt;JSR 380 ‚Äì Bean Validation 2.0&lt;/li&gt;
    &lt;li&gt;MicroProfile Configuration&lt;/li&gt;
    &lt;li&gt;MicroProfile Health&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;h2&gt;Conclus√£o&lt;/h2&gt;

&lt;div class=&quot;image-box&quot;&gt;
    &lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/1aed10d6upbh2rmvhdo8.jpg&quot; alt=&quot;Just use-it!&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Caso voc√™ n√£o conhe√ßa as especifica√ß√µes Jakarta EE, esse √© um bom ponto de inicio para voc√™.&lt;/p&gt;

&lt;p&gt;Caso voc√™ j√° conhe√ßa as especifica√ß√µes Jakarta EE, esse √© um bom inicio para aprender um pouco mais.&lt;/p&gt;</content><author><name>https://www.linkedin.com/in/victorosorio/</name></author><category term="Jakarta-EE" /><category term="Java-EE" /><category term="Java" /><category term="Framework" /><summary type="html">Talvez voc√™ como desenvolvedor Java n√£o conhe√ßa esses dois nomes. Talvez quando voc√™ vai pensar em desenvolver Java j√° pensa em Spring. Caso voc√™ esteja nesses dois grupos, essa s√©rie √© para voc√™!</summary></entry><entry><title type="html">Microservi√ßos e Fordismo</title><link href="/posts/microservicos-e-fordismo/" rel="alternate" type="text/html" title="Microservi√ßos e Fordismo" /><published>2019-07-27T00:00:00-03:00</published><updated>2019-07-27T00:00:00-03:00</updated><id>/posts/microservicos-e-fordismo</id><content type="html" xml:base="/posts/microservicos-e-fordismo/">&lt;p&gt;&lt;em&gt;A Lei de Conway Reversa tamb√©m significa que os desenvolvedores ser√£o, em muitos aspectos como microservi√ßos: eles ser√£o capazes de fazer uma tarefa e (espera-se) fazer essa tarefa muito bem, mas eles estar√£o isolados (em termos de responsabilidade, conhecimento do dom√≠nio e experi√™ncia) do resto do ecossistema. Quando considerados juntos, todos os desenvolvedores trabalhando &lt;strong&gt;coletivamente&lt;/strong&gt; dentro de um ecossistema de microservi√ßos saber√£o tudo que h√° pra saber sobre ele, mas individualmente eles ser√£o extremamente especializados, conhecendo apenas as partes do ecossistema pelas  quais s√£o respons√°veis.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A cita√ß√£o acima foi extra√≠da do livro &lt;strong&gt;Microservi√ßos prontos para a produ√ß√£o&lt;/strong&gt; da p√°gina 48. Fica muito evidente a similaridade de uma arquitetura de microservi√ßos com o modelo de produ√ß√£o Fordista! üè≠üè≠üè≠üè≠&lt;/p&gt;

&lt;p&gt;H√° muitos pontos positivos nisso:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Velocidade na produ√ß√£o&lt;/li&gt;
  &lt;li&gt;Consist√™ncia entre as solu√ß√µes abaixo da camada de microservi√ßos (&lt;em&gt;visto que os desenvolvedores n√£o tem nem dominio e nem escolha sobre essas camadas&lt;/em&gt;)&lt;/li&gt;
  &lt;li&gt;N√£o d√° para reconstruir a estrutura do zero facilmente (&lt;em&gt;sim, isso √© positivo, evita espionagem industrial&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mas tamb√©m h√° alguns pontos negativos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;O conhecimento do sistema como um todo est√° disperso&lt;/li&gt;
  &lt;li&gt;Poss√≠vel falta de compartilhamento entre os n√≥s do ecossistemas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quando estava na faculdade, muitos professores diziam que eramos &lt;strong&gt;Pedreiros do Egito&lt;/strong&gt; pela maneira rudimentar que o processo era controla. Agora acredito que somos trabalhadores de uma f√°brica do inicio do s√©culo XX.&lt;/p&gt;</content><author><name>https://www.linkedin.com/in/victorosorio/</name></author><category term="Cita√ß√µes" /><category term="Microservi√ßos" /><category term="Desenvolvimento" /><summary type="html">A Lei de Conway Reversa tamb√©m significa que os desenvolvedores ser√£o, em muitos aspectos como microservi√ßos: eles ser√£o capazes de fazer uma tarefa e (espera-se) fazer essa tarefa muito bem, mas eles estar√£o isolados (em termos de responsabilidade, conhecimento do dom√≠nio e experi√™ncia) do resto do ecossistema. Quando considerados juntos, todos os desenvolvedores trabalhando coletivamente dentro de um ecossistema de microservi√ßos saber√£o tudo que h√° pra saber sobre ele, mas individualmente eles ser√£o extremamente especializados, conhecendo apenas as partes do ecossistema pelas quais s√£o respons√°veis. A cita√ß√£o acima foi extra√≠da do livro Microservi√ßos prontos para a produ√ß√£o da p√°gina 48. Fica muito evidente a similaridade de uma arquitetura de microservi√ßos com o modelo de produ√ß√£o Fordista! üè≠üè≠üè≠üè≠ H√° muitos pontos positivos nisso: Velocidade na produ√ß√£o Consist√™ncia entre as solu√ß√µes abaixo da camada de microservi√ßos (visto que os desenvolvedores n√£o tem nem dominio e nem escolha sobre essas camadas) N√£o d√° para reconstruir a estrutura do zero facilmente (sim, isso √© positivo, evita espionagem industrial) Mas tamb√©m h√° alguns pontos negativos: O conhecimento do sistema como um todo est√° disperso Poss√≠vel falta de compartilhamento entre os n√≥s do ecossistemas. Quando estava na faculdade, muitos professores diziam que eramos Pedreiros do Egito pela maneira rudimentar que o processo era controla. Agora acredito que somos trabalhadores de uma f√°brica do inicio do s√©culo XX.</summary></entry><entry><title type="html">Tests and Requirements</title><link href="/posts/thoughts-on-tdd-tests-and-requirements/" rel="alternate" type="text/html" title="Tests and Requirements" /><published>2019-07-24T00:00:00-03:00</published><updated>2019-07-24T00:00:00-03:00</updated><id>/posts/thoughts-on-tdd-tests-and-requirements</id><content type="html" xml:base="/posts/thoughts-on-tdd-tests-and-requirements/">&lt;p&gt;In the last days I‚Äôm facing a huge question: &lt;em&gt;With several teams working with several projects, how to avoid new bugs?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the company that I work, we have a lot of microservices, but there is no owner. Probably someone can start working in a project and a new feature should be added in a microservice. When this happen, &lt;strong&gt;no bug should be added to any service in any client!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this post I will describe how we are handling features changes with TDD.&lt;/p&gt;

&lt;h1 id=&quot;tdd-process-review&quot;&gt;TDD process review&lt;/h1&gt;
&lt;p&gt;When using TDD to develop any software we must:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Configure Testing Frameworks&lt;/li&gt;
  &lt;li&gt;Write a Test that fails&lt;/li&gt;
  &lt;li&gt;Write the code that fixes all the Tests&lt;/li&gt;
  &lt;li&gt;Refactor your code if necessary&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is what we call Red-Green-Refactor. First you make a test fail, then you fix and at least you improve your code organization.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.amazonaws.com/codecademy-content/programs/tdd-js/articles/red-green-refactor-tdd.png&quot; alt=&quot;RGR Process&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;some-thoughts-on-red-green-refactor&quot;&gt;Some thoughts on Red-Green-Refactor&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Red-Green-Refactor&lt;/strong&gt; most of time is used for Unit Tests. And this lead some questions about requirements:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;How can we ensure that all the requirements are implemented by the our code?&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;How can we ensure that any future implementation will not change any requirement?&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;How can we ensure that all developers will know all requirements in any future implementation?&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://memeworld.funnyjunk.com/pictures/When+you+have+a+group+project_a71b2c_6624638.jpg&quot; alt=&quot;When someone change your code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we are talking about Unit Testing, this questions is not applied, because we are testing a class or a small piece of code. One change on this piece of code can change all software behaviour.&lt;/p&gt;

&lt;h1 id=&quot;create-test-for-requirements&quot;&gt;Create Test for Requirements&lt;/h1&gt;

&lt;p&gt;For all types of tests, none apply for requirements, they are all named according with the implementation components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unit testing&lt;/li&gt;
  &lt;li&gt;Integration testing&lt;/li&gt;
  &lt;li&gt;System testing&lt;/li&gt;
  &lt;li&gt;Sanity testing&lt;/li&gt;
  &lt;li&gt;Smoke testing&lt;/li&gt;
  &lt;li&gt;Interface testing&lt;/li&gt;
  &lt;li&gt;Regression testing&lt;/li&gt;
  &lt;li&gt;Beta/Acceptance testing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;But‚Ä¶&lt;/em&gt;&lt;/strong&gt; This names can mean nothing, we can create test for any purpose we want! So, I‚Äôm proposing a new kind of test: &lt;strong&gt;&lt;em&gt;Requirement Test&lt;/em&gt;&lt;/strong&gt;‚Ä¶ Ok, &lt;a href=&quot;https://www.tutorialspoint.com/software_testing_dictionary/requirements_based_testing&quot;&gt;it already exists&lt;/a&gt;! No problem.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First create A Test Suite based on the Domain, not on the implementation. Instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;UserManagerTests&lt;/code&gt;, just a &lt;code class=&quot;highlighter-rouge&quot;&gt;UserTests&lt;/code&gt;class.&lt;/li&gt;
  &lt;li&gt;Then add all Requirement with a plain and complete text descriptions. This works fine on JUnit5&lt;/li&gt;
  &lt;li&gt;If any test are failing, correct the code&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
   &lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;It SHOULD allow create Users without a name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createWithoutNameTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;// Do the tests&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
   &lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;It SHOULD only requires username and password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createWithMinimumPropertiesTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;// Do the tests&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is important to keep this tests in all changes, because this tests keep a memory of all requirements.&lt;/p&gt;

&lt;h2 id=&quot;tips&quot;&gt;Tips&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The more you abuse of words like &lt;strong&gt;SHOULD&lt;/strong&gt;, &lt;strong&gt;NEVER&lt;/strong&gt;, &lt;strong&gt;ALWAYS&lt;/strong&gt; or &lt;strong&gt;CAN&lt;/strong&gt; better is your description.&lt;/li&gt;
  &lt;li&gt;Keep in mind the desired behaviour should be expressed as a &lt;strong&gt;Test&lt;/strong&gt; and a &lt;strong&gt;Test Description&lt;/strong&gt;. Any future development should know why all theses tests exists.&lt;/li&gt;
  &lt;li&gt;Keep in mind that in a future modification, the developer cannot talk with you, but he can see what you were thinking in the moment of the change.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Most of TDD approaches always talk about unit testing, but unit testing does not prevent you of any undesired requirement change. For that we purpose a Requirement Test. All requirement should be written as a Test. If any failed it cab be:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The requirement has changed&lt;/li&gt;
  &lt;li&gt;This change adds a bug in any other piece of code.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>https://www.linkedin.com/in/victorosorio/</name></author><category term="Java" /><category term="TDD" /><category term="Bugs" /><category term="Requirement" /><summary type="html">In the last days I‚Äôm facing a huge question: With several teams working with several projects, how to avoid new bugs? In the company that I work, we have a lot of microservices, but there is no owner. Probably someone can start working in a project and a new feature should be added in a microservice. When this happen, no bug should be added to any service in any client! In this post I will describe how we are handling features changes with TDD. TDD process review When using TDD to develop any software we must: Configure Testing Frameworks Write a Test that fails Write the code that fixes all the Tests Refactor your code if necessary This is what we call Red-Green-Refactor. First you make a test fail, then you fix and at least you improve your code organization. Some thoughts on Red-Green-Refactor Red-Green-Refactor most of time is used for Unit Tests. And this lead some questions about requirements: How can we ensure that all the requirements are implemented by the our code? How can we ensure that any future implementation will not change any requirement? How can we ensure that all developers will know all requirements in any future implementation? If we are talking about Unit Testing, this questions is not applied, because we are testing a class or a small piece of code. One change on this piece of code can change all software behaviour. Create Test for Requirements For all types of tests, none apply for requirements, they are all named according with the implementation components: Unit testing Integration testing System testing Sanity testing Smoke testing Interface testing Regression testing Beta/Acceptance testing But‚Ä¶ This names can mean nothing, we can create test for any purpose we want! So, I‚Äôm proposing a new kind of test: Requirement Test‚Ä¶ Ok, it already exists! No problem. First create A Test Suite based on the Domain, not on the implementation. Instead of UserManagerTests, just a UserTestsclass. Then add all Requirement with a plain and complete text descriptions. This works fine on JUnit5 If any test are failing, correct the code class UserTests { @Test @DisplayName(&quot;It SHOULD allow create Users without a name&quot;) void createWithoutNameTest() { // Do the tests fail(); } @Test @DisplayName(&quot;It SHOULD only requires username and password&quot;) void createWithMinimumPropertiesTest() { // Do the tests fail(); } } It is important to keep this tests in all changes, because this tests keep a memory of all requirements. Tips The more you abuse of words like SHOULD, NEVER, ALWAYS or CAN better is your description. Keep in mind the desired behaviour should be expressed as a Test and a Test Description. Any future development should know why all theses tests exists. Keep in mind that in a future modification, the developer cannot talk with you, but he can see what you were thinking in the moment of the change. Conclusion Most of TDD approaches always talk about unit testing, but unit testing does not prevent you of any undesired requirement change. For that we purpose a Requirement Test. All requirement should be written as a Test. If any failed it cab be: The requirement has changed This change adds a bug in any other piece of code.</summary></entry><entry><title type="html">Start a project by the README</title><link href="/posts/start-a-project-by-the-readme/" rel="alternate" type="text/html" title="Start a project by the README" /><published>2019-06-25T00:00:00-03:00</published><updated>2019-06-25T00:00:00-03:00</updated><id>/posts/start-a-project-by-the-readme</id><content type="html" xml:base="/posts/start-a-project-by-the-readme/">&lt;p&gt;In the last months I‚Äôm investing my time in learning how write a good documetation.&lt;/p&gt;

&lt;p&gt;Almost all projects I had worked had a lack of documentation. If you have already try to start develop/use any project, you probably had to face with the problem of knowing where to start.&lt;/p&gt;

&lt;p&gt;So here is my approache of how to build a well documented project&lt;/p&gt;

&lt;h1 id=&quot;1-starting-describing-your-project&quot;&gt;1. Starting describing your project&lt;/h1&gt;

&lt;p&gt;Be short! Describe you project in few lines.&lt;/p&gt;

&lt;h2 id=&quot;good-example&quot;&gt;Good Example&lt;/h2&gt;

&lt;p&gt;A good example is &lt;a href=&quot;http://zookeeper.apache.org/&quot;&gt;Zookeeper&lt;/a&gt; description:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the first line you know what problem you an solve with this project. If you continue to reading there is a more detailed description. Good!&lt;/p&gt;

&lt;h2 id=&quot;bad-example&quot;&gt;Bad Example&lt;/h2&gt;

&lt;p&gt;A bad example is &lt;a href=&quot;https://kafka.apache.org/intro&quot;&gt;Kafka&lt;/a&gt; description:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Apache Kafka¬Æ is a distributed streaming platform. What exactly does that mean?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The documentation is clear that the reader will not undestand!! If you continue to read, it will describe &lt;em&gt;real time pipelines&lt;/em&gt;, &lt;em&gt;clusters&lt;/em&gt;, etc‚Ä¶ But what the main porpuse of Kafka?&lt;/p&gt;

&lt;p&gt;If I had to rewrite Kafka documentation, this will be the second item from it. The first will be a short description of &lt;strong&gt;What is&lt;/strong&gt; Kafka and &lt;strong&gt;Which type of problem it solves&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tips&quot;&gt;Tips&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Avoid own defined terms. Use commons terms&lt;/li&gt;
  &lt;li&gt;Be short. Few and short lines.&lt;/li&gt;
  &lt;li&gt;Answer questions.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;briefly&quot;&gt;Briefly‚Ä¶&lt;/h2&gt;
&lt;p&gt;A good description is a short text that answer two question. What is and Which type of problem solves.&lt;/p&gt;

&lt;h1 id=&quot;2-after-describing-you-project-explain-hidden-ideas&quot;&gt;2. After describing you project, explain hidden ideas&lt;/h1&gt;

&lt;p&gt;The second section of my READMEs are the &lt;strong&gt;Rational&lt;/strong&gt; section. Here I quickly list all ideas behind my code.&lt;/p&gt;

&lt;p&gt;Let‚Äôs imagine we are building a new NoSQL database.&lt;/p&gt;

&lt;p&gt;The first thought a user can have is: &lt;em&gt;I lost all my SQL validations?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The first thought a developer can have is: &lt;em&gt;Can we add some kind of validations?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Both questions are welcome, but it can be answer with a single line in this session:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This achieve a High-Throughput, no validation will be done by the database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any important idea &lt;strong&gt;SHOULD&lt;/strong&gt; be described in this session shortly. If more information is need, you can add a link to another README explain it.&lt;/p&gt;

&lt;h1 id=&quot;3-explain-resources-and-terms&quot;&gt;3. Explain Resources and Terms&lt;/h1&gt;

&lt;p&gt;Does your project define any term? Explain here.&lt;/p&gt;

&lt;p&gt;Does your project uses a own file format? Explain here.&lt;/p&gt;

&lt;p&gt;Imagine that I‚Äôm building a Business Rule Engine, all business rule must be written in a specifica file format. You should explain shortly what is this file format and create a specific README file for it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;BR file defines a single Business Rule. (More information link)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;4-explain-behaviour-and-interactions&quot;&gt;4. Explain behaviour and Interactions&lt;/h1&gt;

&lt;p&gt;Explain how your code works. A user or a developer should know how your project works. If you are developing a Message Queue, here is a good place where you can describe shortly how a message will be delivered to all (or not to all) clients.&lt;/p&gt;

&lt;h1 id=&quot;5-describe-which-api-you-provide&quot;&gt;5. Describe which API you provide&lt;/h1&gt;

&lt;p&gt;Do you provide a REST API? An Java library? A C library? Describe the key points for the provided API. Shortly!&lt;/p&gt;

&lt;h1 id=&quot;be-short&quot;&gt;Be short!&lt;/h1&gt;

&lt;p&gt;In the main README file you &lt;strong&gt;SHOULD&lt;/strong&gt; be shortly. This is not the place where you will deeply explain everything, this is the place to show key concepts.&lt;/p&gt;

&lt;h1 id=&quot;be-consistent&quot;&gt;Be consistent!&lt;/h1&gt;

&lt;p&gt;What if a change on the code change something related with what is written in the README? This is the main problem that occurs in software development. The documentation is not consistent with the code.&lt;/p&gt;

&lt;p&gt;For each project you should define your own &lt;strong&gt;Definition Of Done&lt;/strong&gt;. If the change does not reflects the documention, so the change is not ready!&lt;/p&gt;

&lt;h1 id=&quot;concluding&quot;&gt;Concluding&lt;/h1&gt;

&lt;p&gt;When you listen that &lt;em&gt;the documentation is the code&lt;/em&gt;, do not touch in this code! Every line of code there is a hidden idea that sometimes are not expressed because it cannot be expressed in code.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; align=&quot;center&quot; data-theme=&quot;dark&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;A comment is a failure to express yourself in code.  If you fail, then write a comment; but try not to fail.&lt;/p&gt;&amp;mdash; Uncle Bob Martin (@unclebobmartin) &lt;a href=&quot;https://twitter.com/unclebobmartin/status/870311898545258497?ref_src=twsrc%5Etfw&quot;&gt;June 1, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;The idea of Uncle Bob is well accepted in simple projects, but what if the project has some architectural complex decisions? How can express it without a README or some comments?&lt;/p&gt;

&lt;h1 id=&quot;more&quot;&gt;More&lt;/h1&gt;

&lt;p&gt;You can add more sections to your main README file. But you should be short.&lt;/p&gt;</content><author><name>https://www.linkedin.com/in/victorosorio/</name></author><category term="Software Documentation" /><category term="README" /><category term="Documentation" /><summary type="html">In the last months I‚Äôm investing my time in learning how write a good documetation. Almost all projects I had worked had a lack of documentation. If you have already try to start develop/use any project, you probably had to face with the problem of knowing where to start. So here is my approache of how to build a well documented project 1. Starting describing your project Be short! Describe you project in few lines. Good Example A good example is Zookeeper description: ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services. In the first line you know what problem you an solve with this project. If you continue to reading there is a more detailed description. Good! Bad Example A bad example is Kafka description: Apache Kafka¬Æ is a distributed streaming platform. What exactly does that mean? The documentation is clear that the reader will not undestand!! If you continue to read, it will describe real time pipelines, clusters, etc‚Ä¶ But what the main porpuse of Kafka? If I had to rewrite Kafka documentation, this will be the second item from it. The first will be a short description of What is Kafka and Which type of problem it solves. Tips Avoid own defined terms. Use commons terms Be short. Few and short lines. Answer questions. Briefly‚Ä¶ A good description is a short text that answer two question. What is and Which type of problem solves. 2. After describing you project, explain hidden ideas The second section of my READMEs are the Rational section. Here I quickly list all ideas behind my code. Let‚Äôs imagine we are building a new NoSQL database. The first thought a user can have is: I lost all my SQL validations? The first thought a developer can have is: Can we add some kind of validations? Both questions are welcome, but it can be answer with a single line in this session: This achieve a High-Throughput, no validation will be done by the database. Any important idea SHOULD be described in this session shortly. If more information is need, you can add a link to another README explain it. 3. Explain Resources and Terms Does your project define any term? Explain here. Does your project uses a own file format? Explain here. Imagine that I‚Äôm building a Business Rule Engine, all business rule must be written in a specifica file format. You should explain shortly what is this file format and create a specific README file for it: BR file defines a single Business Rule. (More information link) 4. Explain behaviour and Interactions Explain how your code works. A user or a developer should know how your project works. If you are developing a Message Queue, here is a good place where you can describe shortly how a message will be delivered to all (or not to all) clients. 5. Describe which API you provide Do you provide a REST API? An Java library? A C library? Describe the key points for the provided API. Shortly! Be short! In the main README file you SHOULD be shortly. This is not the place where you will deeply explain everything, this is the place to show key concepts. Be consistent! What if a change on the code change something related with what is written in the README? This is the main problem that occurs in software development. The documentation is not consistent with the code. For each project you should define your own Definition Of Done. If the change does not reflects the documention, so the change is not ready! Concluding When you listen that the documentation is the code, do not touch in this code! Every line of code there is a hidden idea that sometimes are not expressed because it cannot be expressed in code. A comment is a failure to express yourself in code. If you fail, then write a comment; but try not to fail.&amp;mdash; Uncle Bob Martin (@unclebobmartin) June 1, 2017 The idea of Uncle Bob is well accepted in simple projects, but what if the project has some architectural complex decisions? How can express it without a README or some comments? More You can add more sections to your main README file. But you should be short.</summary></entry><entry><title type="html">Java Memory Leak for JDBC</title><link href="/posts/java-memory-leak-for-jdbc/" rel="alternate" type="text/html" title="Java Memory Leak for JDBC" /><published>2019-06-03T00:00:00-03:00</published><updated>2019-06-03T00:00:00-03:00</updated><id>/posts/java-memory-leak-for-jdbc</id><content type="html" xml:base="/posts/java-memory-leak-for-jdbc/">&lt;h1 id=&quot;the-context&quot;&gt;The Context&lt;/h1&gt;

&lt;p&gt;I had written an engine using a custom ClassLoader. To do that just create a new &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/net/URLClassLoader.html&quot;&gt;URLClassLoader&lt;/a&gt;, load a jar and execute what code you want, than close the URLClassLoader. If the new ClassLoader doesn‚Äôt have access to the current ClassLoader, the loaded classes does not have access to your code. Good! Very Good!&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* The jars to be loaded */&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;URLClassLoader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classLoader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;URLClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Job&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;the-problem&quot;&gt;The Problem&lt;/h1&gt;

&lt;p&gt;But‚Ä¶ We do not have control with the code loaded from an external Jar. That is the problem. So if you want to avoid memory leaks the your custom classloader should be released by Garbage Collector. If the loaded code uses JDBC you will soon get an OutOfMemoryError and everything will crash! Not good!&lt;/p&gt;

&lt;h1 id=&quot;the-reason&quot;&gt;The reason&lt;/h1&gt;
&lt;p&gt;Whe JDBC loads the driver they assumes that you will use only one ClassLoader, so  it create a reference to your ClassLoader. This reference prevents the Garbage Collector from removing your custom ClassLoader from the memory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/789mmfr2dkp8ezgm2p91.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, even if you create your ClassLoader, execute your code and close it. The total of loaded classes will never decrease.&lt;/p&gt;

&lt;h1 id=&quot;how-to-solve&quot;&gt;How to solve?&lt;/h1&gt;

&lt;p&gt;To solve this problem we have to unregister all JDBC drivers just after the execution, than close URLClassLoader.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* The jars to be loaded */&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;URLClassLoader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classLoader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;URLClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Job&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DriverManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDrivers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;DriverManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deregisterDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error unregistering driver!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, let‚Äôs look for the loaded classes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/xzaa7ftdokc0078tg9n5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;possible-problems&quot;&gt;Possible problems&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;If the executed code create any Thread, the URLClassLoader is not eligible for Garbage Collector.&lt;/li&gt;
  &lt;li&gt;If some library create any Thread, same problem from #1.&lt;/li&gt;
  &lt;li&gt;MongoDb client create a Thread. üò´&lt;/li&gt;
&lt;/ol&gt;</content><author><name>https://www.linkedin.com/in/victorosorio/</name></author><category term="Java" /><category term="JDBC" /><category term="Memory Leak" /><category term="Garbage Collector" /><summary type="html">The Context I had written an engine using a custom ClassLoader. To do that just create a new URLClassLoader, load a jar and execute what code you want, than close the URLClassLoader. If the new ClassLoader doesn‚Äôt have access to the current ClassLoader, the loaded classes does not have access to your code. Good! Very Good! URL[] jars = new URL[] { /* The jars to be loaded */ }; // try (URLClassLoader classLoader = new URLClassLoader(jars)) { Job job = classLoader.loadClass(Job.class.getName()); job.execute(); } The Problem But‚Ä¶ We do not have control with the code loaded from an external Jar. That is the problem. So if you want to avoid memory leaks the your custom classloader should be released by Garbage Collector. If the loaded code uses JDBC you will soon get an OutOfMemoryError and everything will crash! Not good! The reason Whe JDBC loads the driver they assumes that you will use only one ClassLoader, so it create a reference to your ClassLoader. This reference prevents the Garbage Collector from removing your custom ClassLoader from the memory. So, even if you create your ClassLoader, execute your code and close it. The total of loaded classes will never decrease. How to solve? To solve this problem we have to unregister all JDBC drivers just after the execution, than close URLClassLoader. URL[] jars = new URL[] { /* The jars to be loaded */ }; // try (URLClassLoader classLoader = new URLClassLoader(jars)) { Job job = classLoader.loadClass(Job.class.getName()); job.execute(); Collections.list(DriverManager.getDrivers()).forEach(driver -&amp;gt; { try { DriverManager.deregisterDriver(driver); } catch (SQLException e) { logger.error(&quot;Error unregistering driver!&quot;, e); } }); } Now, let‚Äôs look for the loaded classes: Possible problems If the executed code create any Thread, the URLClassLoader is not eligible for Garbage Collector. If some library create any Thread, same problem from #1. MongoDb client create a Thread. üò´</summary></entry><entry><title type="html">A very simple Test Driven Development Tutorial</title><link href="/posts/a-very-simple-test-driven-development-tutorial/" rel="alternate" type="text/html" title="A very simple Test Driven Development Tutorial" /><published>2019-03-28T00:00:00-03:00</published><updated>2019-03-28T00:00:00-03:00</updated><id>/posts/a-very-simple-test-driven-development-tutorial</id><content type="html" xml:base="/posts/a-very-simple-test-driven-development-tutorial/">&lt;p&gt;Now I‚Äôm addicted with Test Driven Development, but‚Ä¶ Somewhere in the past I thought it was a bad idea. Now I can‚Äôt develop any code without this technique.&lt;/p&gt;

&lt;p&gt;In this post I will present some steps to starting using TDD in your daily work.&lt;/p&gt;

&lt;h1 id=&quot;tips&quot;&gt;Tips&lt;/h1&gt;

&lt;h2 id=&quot;tip-1-know-which-tools-you-must-use&quot;&gt;Tip 1: Know which tools you must use&lt;/h2&gt;

&lt;p&gt;Which language you use? I work mostly using Java and for many years I never heard about Maven and how integrate Maven with JUnit. So JUnit without Maven or Gradle or any other building tool is nothing! &lt;em&gt;Nobody in the company I was working kwen Maven or any building tool‚Ä¶ It was some kind of amateur craftsmanship software&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When I was introduced to Maven, after some years using Gradle by my own, I only asked: &lt;em&gt;‚ÄúOk. It make the build, run the tests and make the application deployable?&lt;/em&gt;‚Äù. That was I was looking for! üòÄ&lt;/p&gt;

&lt;p&gt;When start a new project make a roadmap:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Setup building tool: &lt;em&gt;Maven or Gradle for Java&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Configure the Testing tool: &lt;em&gt;Why not using JUnit 5&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Create your first Test with an assert and check if works!&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;tip-2-know-the-tdd-cycles&quot;&gt;Tip 2: Know the TDD Cycles&lt;/h2&gt;

&lt;p&gt;Red, Green, Refactor! This makes senses? No, so &lt;a href=&quot;https://blog.cleancoder.com/uncle-bob/2014/12/17/TheCyclesOfTDD.html&quot;&gt;read about it!&lt;/a&gt; This is the way you will develop using TDD. Write a falling test, write the code for make the test works and refactor it.&lt;/p&gt;

&lt;p&gt;Until the test works, do not worry about replicated code, or bad smells, or if your code is good and beautiful! Just solve the problem. This is not the moment for that.&lt;/p&gt;

&lt;p&gt;Make small steps. Do not worry about write the full feature before tests. Test every step of your code. If you should save a entity on your database, first save it, then test every kind of input for this entity, then write all business rules. It is a waste of time write the full feature and then tests. Making small steps you can fix an error before it gets bigger, and you make sure that the code you wrote a hour ago works well.&lt;/p&gt;

&lt;h2 id=&quot;tip-3-validate-your-code&quot;&gt;Tip 3: Validate your code&lt;/h2&gt;

&lt;p&gt;What means pass the test? For a development team a work with, it means giving a Coverage Report with at least 80%! Is that correct? No! You should validate what you have done.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;givenUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// here I have 100% of Code Coverage&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// But I do not know if it was save&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;allMatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwordIsEncrypted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// And if the password is correctly encrypted&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;tip-4-know-good-test-libraries&quot;&gt;Tip 4: Know Good Test Libraries&lt;/h2&gt;

&lt;p&gt;Mockito, AssertJ, To String Verifier, etc‚Ä¶ This will help you. Trust in me! Do not reinvent a library, reuse. There is a lot of good libraries for tests.&lt;/p&gt;

&lt;h2 id=&quot;tip-5-organize-your-code-for-testing&quot;&gt;Tip 5: Organize your code for testing&lt;/h2&gt;

&lt;p&gt;Write your production code thinking who can you test it.&lt;/p&gt;

&lt;p&gt;Imagine that you have a code with a lot of Services Consumers and Providers (Kafka, &lt;em&gt;MQ, Aws&lt;/em&gt;, Google*, etc..). Every time you create a new producer or consumer, it should be created by the same piece of code! When you do it, it is easy to create a Mock for this class. If you have a KafkaClientFactory, you do need to worry about a new KafkaProducer, just use Mockito to mock KafkaClientFactory and be happy&lt;/p&gt;

&lt;p&gt;How to build a Singleton?&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeSingleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AtomicReference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SomeSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AtomicReference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeSingleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;updateAndGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Is this implementation good? No! Why? If I want to cleanup this singleton and recreated? How can I access the field &lt;code class=&quot;highlighter-rouge&quot;&gt;ref&lt;/code&gt;? You can‚Äôt! You have to options, or you let the field &lt;code class=&quot;highlighter-rouge&quot;&gt;ref&lt;/code&gt; as a &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;private&lt;/span&gt;&lt;/code&gt; or you create a cleanup method as package private, and create a SomeSingletonHelper in the same package as a code test to reset all values.&lt;/p&gt;

&lt;p&gt;The intention is thinking, how can I test my code when you are writing the code.&lt;/p&gt;

&lt;h2 id=&quot;tip-6-know-the-input-and-output&quot;&gt;Tip 6: Know the input and output&lt;/h2&gt;

&lt;p&gt;When creating tests, you should known with type of input your code will received, and which type of output should provide. Use known inputs, not only auto-generated. This helps you to make sure its working&lt;/p&gt;

&lt;h2 id=&quot;tip-7-use-real-inputs&quot;&gt;Tip 7: Use real inputs&lt;/h2&gt;

&lt;p&gt;Use real inputs, not only generated/dummy inputs. Found a production bug? Get what input produces the bug, create a test with it!&lt;/p&gt;

&lt;h2 id=&quot;tip-8-testing-language&quot;&gt;Tip 8: Testing language&lt;/h2&gt;

&lt;p&gt;Create a Test DSL for your code.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randomString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randomString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allUsers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allUsers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Compare the code above with the code bellow&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;givenRandonUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thenAllUsers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Build a High Level &lt;a href=&quot;https://en.wikipedia.org/wiki/Given-When-Then&quot;&gt;Given-When-Then&lt;/a&gt; library for your code&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Testing is not a waste of time! When you had never done TDD you will think that, but with TDD you use better your time.&lt;/p&gt;</content><author><name>https://www.linkedin.com/in/victorosorio/</name></author><category term="Testing" /><category term="Java" /><category term="Test" /><category term="TDD" /><summary type="html">Now I‚Äôm addicted with Test Driven Development, but‚Ä¶ Somewhere in the past I thought it was a bad idea. Now I can‚Äôt develop any code without this technique. In this post I will present some steps to starting using TDD in your daily work. Tips Tip 1: Know which tools you must use Which language you use? I work mostly using Java and for many years I never heard about Maven and how integrate Maven with JUnit. So JUnit without Maven or Gradle or any other building tool is nothing! Nobody in the company I was working kwen Maven or any building tool‚Ä¶ It was some kind of amateur craftsmanship software. When I was introduced to Maven, after some years using Gradle by my own, I only asked: ‚ÄúOk. It make the build, run the tests and make the application deployable?‚Äù. That was I was looking for! üòÄ When start a new project make a roadmap: Setup building tool: Maven or Gradle for Java Configure the Testing tool: Why not using JUnit 5 Create your first Test with an assert and check if works! Tip 2: Know the TDD Cycles Red, Green, Refactor! This makes senses? No, so read about it! This is the way you will develop using TDD. Write a falling test, write the code for make the test works and refactor it. Until the test works, do not worry about replicated code, or bad smells, or if your code is good and beautiful! Just solve the problem. This is not the moment for that. Make small steps. Do not worry about write the full feature before tests. Test every step of your code. If you should save a entity on your database, first save it, then test every kind of input for this entity, then write all business rules. It is a waste of time write the full feature and then tests. Making small steps you can fix an error before it gets bigger, and you make sure that the code you wrote a hour ago works well. Tip 3: Validate your code What means pass the test? For a development team a work with, it means giving a Coverage Report with at least 80%! Is that correct? No! You should validate what you have done. User user = givenUser(); userService.createUser(user); // here I have 100% of Code Coverage List&amp;lt;User&amp;gt; users = userService.list(); assertThat(users).hasSize(1) // But I do not know if it was save .allMatch(this::passwordIsEncrypted); // And if the password is correctly encrypted Tip 4: Know Good Test Libraries Mockito, AssertJ, To String Verifier, etc‚Ä¶ This will help you. Trust in me! Do not reinvent a library, reuse. There is a lot of good libraries for tests. Tip 5: Organize your code for testing Write your production code thinking who can you test it. Imagine that you have a code with a lot of Services Consumers and Providers (Kafka, MQ, Aws, Google*, etc..). Every time you create a new producer or consumer, it should be created by the same piece of code! When you do it, it is easy to create a Mock for this class. If you have a KafkaClientFactory, you do need to worry about a new KafkaProducer, just use Mockito to mock KafkaClientFactory and be happy How to build a Singleton? public class SomeSingleton { private static final instance AtomicReference&amp;lt;SomeSingleton&amp;gt; ref = new AtomicReference&amp;lt;&amp;gt;(); public static SomeSingleton get() { return instance.updateAndGet(e -&amp;gt; { return isNull(e) ? new SomeSingleton() : e; }); } } Is this implementation good? No! Why? If I want to cleanup this singleton and recreated? How can I access the field ref? You can‚Äôt! You have to options, or you let the field ref as a package private or you create a cleanup method as package private, and create a SomeSingletonHelper in the same package as a code test to reset all values. The intention is thinking, how can I test my code when you are writing the code. Tip 6: Know the input and output When creating tests, you should known with type of input your code will received, and which type of output should provide. Use known inputs, not only auto-generated. This helps you to make sure its working Tip 7: Use real inputs Use real inputs, not only generated/dummy inputs. Found a production bug? Get what input produces the bug, create a test with it! Tip 8: Testing language Create a Test DSL for your code. User user = new User(); user.setName(randomString()); user.setPassword(randomString()); userService.create(user) List&amp;lt;User&amp;gt; allUsers = userService.list(); assertThat(allUsers).hasSize(1); Compare the code above with the code bellow userService.create(givenRandonUser()) assertThat(thenAllUsers()).hasSize(1); Build a High Level Given-When-Then library for your code Conclusion Testing is not a waste of time! When you had never done TDD you will think that, but with TDD you use better your time.</summary></entry></feed>